"""
Django settings for pithiaesc project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

import os
import environ
import sys

# Initialise environment variables
env = environ.Env()
environ.Env.read_env(
    ALLOWED_HOSTS=('127.0.0.1,localhost'),
    CSRF_TRUSTED_ORIGINS=''
)

if env('CSRF_TRUSTED_ORIGINS') != '':
    CSRF_TRUSTED_ORIGINS = env('CSRF_TRUSTED_ORIGINS').split(',')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

ALLOWED_HOSTS = env('ALLOWED_HOSTS').split(',')


# Application definition

INSTALLED_APPS = [
    'common.apps.CommonConfig',
    'browse.apps.BrowseConfig',
    'data_collection_search.apps.DataCollectionSearchConfig',
    'datahub_management.apps.DatahubManagementConfig',
    'delete.apps.DeleteConfig',
    'handle_management.apps.HandleManagementConfig',
    'help.apps.HelpConfig',
    'metadata_editor.apps.MetadataEditorConfig',
    'ontology.apps.OntologyConfig',
    'present.apps.PresentConfig',
    'register.apps.RegisterConfig',
    'register_with_support.apps.RegisterWithSupportConfig',
    'resource_management.apps.ResourceManagementConfig',
    'search.apps.SearchConfig',
    'static_dataset_search.apps.StaticDatasetSearchConfig',
    'simple_search.apps.SimpleSearchConfig',
    'update.apps.UpdateConfig',
    'update_with_support.apps.UpdateWithSupportConfig',
    'user_management.apps.UserManagementConfig',
    'utils.apps.UtilsConfig',
    'validation.apps.ValidationConfig',
    'workflow_search.apps.WorkflowSearchConfig',
    'django_countries',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'compressor',
]

MIDDLEWARE = [
    'common.middleware.HealthCheckMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'user_management.middleware.LoginMiddleware',
    'user_management.middleware.InstitutionSelectionMiddleware',
    'user_management.middleware.InstitutionSelectionFormMiddleware',
    'common.middleware.ExceptionLoggingMiddleware',
]

ROOT_URLCONF = 'pithiaesc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'project_tags': 'utils.templatetags.project_tags'
            }
        },
    },
]

WSGI_APPLICATION = 'pithiaesc.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ['DATABASE_ENGINE'],
        'NAME': os.environ['DATABASE_NAME'],
        'USER': os.environ['DATABASE_READ_USER'],
        'PASSWORD': os.environ['DATABASE_READ_PASSWORD'],
        'HOST': os.environ['DATABASE_HOST'],
        'PORT': os.environ['DATABASE_PORT'],
    },
    os.environ['DJANGO_RW_DATABASE_NAME']: {
        'ENGINE': os.environ['DATABASE_ENGINE'],
        'NAME': os.environ['DATABASE_NAME'],
        'USER': os.environ['DATABASE_WRITE_USER'],
        'PASSWORD': os.environ['DATABASE_WRITE_PASSWORD'],
        'HOST': os.environ['DATABASE_HOST'],
        'PORT': os.environ['DATABASE_PORT'],
    },
}

if 'test' in sys.argv:
    os.environ['DJANGO_RW_DATABASE_NAME'] = 'default'


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

STATIC_ROOT = BASE_DIR / 'staticfiles/'

STORAGES = {
    'staticfiles': {
        'BACKEND': 'whitenoise.storage.CompressedManifestStaticFilesStorage',
    },
}

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Sessions

SESSION_SAVE_EVERY_REQUEST = True

LOGIN_REQUIRED_URLS = (
    r'/authorised/',
)

LOGIN_REQUIRED_URLS_EXCEPTIONS = (
    r'/login/(.*)$',
    r'/logout/(.*)$',
)

# django-compressor

COMPRESS_OFFLINE = env.bool('COMPRESS_OFFLINE', default=True)

COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'sass {infile} {outfile}'),
)
